/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from '@angular/core';
import 'mousetrap';
import { NgxHotkeysService } from './ngx-hotkeys.service';
var NgxHotkeysDirective = /** @class */ (function () {
    function NgxHotkeysDirective(_hotkeysService, _elementRef) {
        this._hotkeysService = _hotkeysService;
        this._elementRef = _elementRef;
        this._hotkeysList = [];
        this._oldHotkeys = [];
        this._mousetrapInstance = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)
    }
    /**
     * @return {?}
     */
    NgxHotkeysDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        try {
            for (var _a = tslib_1.__values(this.hotkeys), _b = _a.next(); !_b.done; _b = _a.next()) {
                var hotkey = _b.value;
                var /** @type {?} */ combo = Object.keys(hotkey)[0];
                var /** @type {?} */ hotkeyObj = {
                    combo: combo,
                    handler: hotkey[combo]
                };
                var /** @type {?} */ filtered = this._hotkeysService.get(combo);
                var /** @type {?} */ oldHotkey = !!filtered && !!filtered.length ? filtered[0] : null;
                if (oldHotkey !== null) {
                    // We let the user overwrite callbacks temporarily if you specify it in HTML
                    this._oldHotkeys.push(oldHotkey);
                    this._hotkeysService.unregister(oldHotkey);
                }
                this._hotkeysList.push(hotkeyObj);
                this._mousetrapInstance.bind(hotkeyObj.combo, hotkeyObj.handler);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _c;
    };
    /**
     * @return {?}
     */
    NgxHotkeysDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        try {
            for (var _a = tslib_1.__values(this._hotkeysList), _b = _a.next(); !_b.done; _b = _a.next()) {
                var hotkey = _b.value;
                this._mousetrapInstance.unbind(hotkey.combo);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this._hotkeysService.register(this._oldHotkeys);
        var e_2, _c;
    };
    NgxHotkeysDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxHotkeys]',
                    providers: [NgxHotkeysService]
                },] },
    ];
    /** @nocollapse */
    NgxHotkeysDirective.ctorParameters = function () { return [
        { type: NgxHotkeysService, },
        { type: ElementRef, },
    ]; };
    NgxHotkeysDirective.propDecorators = {
        "hotkeys": [{ type: Input },],
    };
    return NgxHotkeysDirective;
}());
export { NgxHotkeysDirective };
function NgxHotkeysDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxHotkeysDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxHotkeysDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxHotkeysDirective.propDecorators;
    /** @type {?} */
    NgxHotkeysDirective.prototype.hotkeys;
    /** @type {?} */
    NgxHotkeysDirective.prototype._mousetrapInstance;
    /** @type {?} */
    NgxHotkeysDirective.prototype._hotkeysList;
    /** @type {?} */
    NgxHotkeysDirective.prototype._oldHotkeys;
    /** @type {?} */
    NgxHotkeysDirective.prototype._hotkeysService;
    /** @type {?} */
    NgxHotkeysDirective.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhvdGtleXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJhbHRpY2NvZGUvbmd4LWhvdGtleXMvIiwic291cmNlcyI6WyJsaWIvbmd4LWhvdGtleXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFvQixNQUFNLGVBQWUsQ0FBQztBQUU5RSxPQUFPLFdBQVcsQ0FBQztBQUduQixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7SUFldEQsNkJBQW9CLGVBQWtDLEVBQVUsV0FBdUI7UUFBbkUsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQVk7NEJBSHJELEVBQUU7MkJBQ0gsRUFBRTtRQUdqQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUN6RTs7OztJQUVELHNDQUFROzs7SUFBUjs7WUFDRSxHQUFHLENBQUMsQ0FBaUIsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxPQUFPLENBQUEsZ0JBQUE7Z0JBQTVCLElBQU0sTUFBTSxXQUFBO2dCQUNmLHFCQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxxQkFBTSxTQUFTLEdBQVk7b0JBQ3pCLEtBQUssRUFBRSxLQUFLO29CQUNaLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO2lCQUN2QixDQUFDO2dCQUNGLHFCQUFNLFFBQVEsR0FBYyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUQscUJBQU0sU0FBUyxHQUFZLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNoRixFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQzs7b0JBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDNUM7Z0JBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDbEU7Ozs7Ozs7Ozs7S0FDRjs7OztJQUVELHlDQUFXOzs7SUFBWDs7WUFDRSxHQUFHLENBQUMsQ0FBaUIsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxZQUFZLENBQUEsZ0JBQUE7Z0JBQWpDLElBQU0sTUFBTSxXQUFBO2dCQUNmLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzlDOzs7Ozs7Ozs7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7O0tBQ2pEOztnQkF4Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztpQkFDL0I7Ozs7Z0JBTE8saUJBQWlCO2dCQUxOLFVBQVU7Ozs0QkFhMUIsS0FBSzs7OEJBYlI7O1NBV2EsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgJ21vdXNldHJhcCc7XHJcblxyXG5pbXBvcnQge0hvdEtleU1hcCwgSUhvdGtleX0gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHtOZ3hIb3RrZXlzU2VydmljZX0gZnJvbSAnLi9uZ3gtaG90a2V5cy5zZXJ2aWNlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW25neEhvdGtleXNdJyxcclxuICBwcm92aWRlcnM6IFtOZ3hIb3RrZXlzU2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neEhvdGtleXNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgaG90a2V5czogSG90S2V5TWFwW107XHJcblxyXG4gIHByaXZhdGUgX21vdXNldHJhcEluc3RhbmNlOiBNb3VzZXRyYXBJbnN0YW5jZTtcclxuICBwcml2YXRlIF9ob3RrZXlzTGlzdDogSUhvdGtleVtdID0gW107XHJcbiAgcHJpdmF0ZSBfb2xkSG90a2V5czogSUhvdGtleVtdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2hvdGtleXNTZXJ2aWNlOiBOZ3hIb3RrZXlzU2VydmljZSwgcHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy5fbW91c2V0cmFwSW5zdGFuY2UgPSBuZXcgTW91c2V0cmFwKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7IC8vIEJpbmQgaG90a2V5cyB0byB0aGUgY3VycmVudCBlbGVtZW50IChhbmQgYW55IGNoaWxkcmVuKVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBmb3IgKGNvbnN0IGhvdGtleSBvZiB0aGlzLmhvdGtleXMpIHtcclxuICAgICAgY29uc3QgY29tYm8gPSBPYmplY3Qua2V5cyhob3RrZXkpWzBdO1xyXG4gICAgICBjb25zdCBob3RrZXlPYmo6IElIb3RrZXkgPSB7XHJcbiAgICAgICAgY29tYm86IGNvbWJvLFxyXG4gICAgICAgIGhhbmRsZXI6IGhvdGtleVtjb21ib11cclxuICAgICAgfTtcclxuICAgICAgY29uc3QgZmlsdGVyZWQ6IElIb3RrZXlbXSA9IHRoaXMuX2hvdGtleXNTZXJ2aWNlLmdldChjb21ibyk7XHJcbiAgICAgIGNvbnN0IG9sZEhvdGtleTogSUhvdGtleSA9ICEhZmlsdGVyZWQgJiYgISFmaWx0ZXJlZC5sZW5ndGggPyBmaWx0ZXJlZFswXSA6IG51bGw7XHJcbiAgICAgIGlmIChvbGRIb3RrZXkgIT09IG51bGwpIHsgLy8gV2UgbGV0IHRoZSB1c2VyIG92ZXJ3cml0ZSBjYWxsYmFja3MgdGVtcG9yYXJpbHkgaWYgeW91IHNwZWNpZnkgaXQgaW4gSFRNTFxyXG4gICAgICAgIHRoaXMuX29sZEhvdGtleXMucHVzaChvbGRIb3RrZXkpO1xyXG4gICAgICAgIHRoaXMuX2hvdGtleXNTZXJ2aWNlLnVucmVnaXN0ZXIob2xkSG90a2V5KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl9ob3RrZXlzTGlzdC5wdXNoKGhvdGtleU9iaik7XHJcbiAgICAgIHRoaXMuX21vdXNldHJhcEluc3RhbmNlLmJpbmQoaG90a2V5T2JqLmNvbWJvLCBob3RrZXlPYmouaGFuZGxlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGZvciAoY29uc3QgaG90a2V5IG9mIHRoaXMuX2hvdGtleXNMaXN0KSB7XHJcbiAgICAgIHRoaXMuX21vdXNldHJhcEluc3RhbmNlLnVuYmluZChob3RrZXkuY29tYm8pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5faG90a2V5c1NlcnZpY2UucmVnaXN0ZXIodGhpcy5fb2xkSG90a2V5cyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==