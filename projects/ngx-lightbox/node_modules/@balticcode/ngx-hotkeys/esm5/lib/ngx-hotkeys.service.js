/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import 'mousetrap';
import { HotkeyOptions } from './token';
import { share } from 'rxjs/internal/operators';
var /** @type {?} */ _defaultOptions = {
    disableCheatSheet: false,
    cheatSheetTitle: 'Keyboard Shortcuts:',
    cheatSheetHotkey: '?',
    cheatSheetHotkeyDescription: 'Show / hide this help menu',
    cheatSheetCloseEsc: false,
    cheatSheetCloseEscDescription: 'Hide this help menu'
};
var NgxHotkeysService = /** @class */ (function () {
    function NgxHotkeysService(_options) {
        this._options = _options;
        this._registeredHotkeys = new Set();
        this._pausedHotkeys = new Set();
        this._cheatSheetToggled = new Subject();
        this._preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];
        this._serviceOptions = Object.assign(_defaultOptions, this._options);
        Mousetrap.prototype.stopCallback = function (event, element, combo, callback) {
            // if the element has the class "mousetrap" then no need to stop
            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
                return false;
            }
            return (element.contentEditable && element.contentEditable === 'true');
        };
        this._mousetrapInstance = new (/** @type {?} */ (Mousetrap))();
        if (!this._serviceOptions.disableCheatSheet) {
            this.register({
                combo: this._serviceOptions.cheatSheetHotkey,
                handler: function (event) {
                    this._cheatSheetToggled.next();
                }.bind(this),
                description: this._serviceOptions.cheatSheetHotkeyDescription
            });
        }
        if (this._serviceOptions.cheatSheetCloseEsc) {
            this.register({
                combo: 'esc',
                handler: function (event) {
                    this._cheatSheetToggled.next(false);
                }.bind(this),
                allowIn: ['HOTKEYS-CHEATSHEET'],
                description: this._serviceOptions.cheatSheetCloseEscDescription
            });
        }
    }
    Object.defineProperty(NgxHotkeysService.prototype, "hotkeys", {
        get: /**
         * Returns the registered hotkeys as array.
         * @return {?} all registered hotkeys
         */
        function () {
            return Array.from(this._registeredHotkeys);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHotkeysService.prototype, "cheatSheetToggled", {
        get: /**
         * Returns an Observable stream indicating the cheatsheets visibility was toggled.
         * @return {?} stream indicating the cheatsheets visibility was toggled
         */
        function () {
            return this._cheatSheetToggled.asObservable().pipe(share());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHotkeysService.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._serviceOptions;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Registers a new hotkey/new hotkeys with it's/their handler(s).
     * @param {?} hotkey hotkeys to listen for
     * @param {?=} unpausing flag indicating if the hotkeys should be unpaused
     * @return {?}
     */
    NgxHotkeysService.prototype.register = /**
     * Registers a new hotkey/new hotkeys with it's/their handler(s).
     * @param {?} hotkey hotkeys to listen for
     * @param {?=} unpausing flag indicating if the hotkeys should be unpaused
     * @return {?}
     */
    function (hotkey, unpausing) {
        var _this = this;
        if (unpausing === void 0) { unpausing = false; }
        var /** @type {?} */ hotkeys = [].concat(hotkey);
        if (unpausing) {
            hotkeys = Array.from(this._pausedHotkeys);
        }
        hotkeys.forEach(function (h) {
            if (unpausing) {
                _this._pausedHotkeys.delete(h);
            }
            _this._registeredHotkeys.add(h);
            _this.bindToMoustrap(h);
        });
    };
    /**
     * Removes a/the registered hotkey(s).
     * @param {?} hotkey hotkey filter
     * @param {?=} pausing flag indicating if the hotkeys should be paused
     * @return {?}
     */
    NgxHotkeysService.prototype.unregister = /**
     * Removes a/the registered hotkey(s).
     * @param {?} hotkey hotkey filter
     * @param {?=} pausing flag indicating if the hotkeys should be paused
     * @return {?}
     */
    function (hotkey, pausing) {
        var _this = this;
        if (pausing === void 0) { pausing = false; }
        var /** @type {?} */ hotkeys = [].concat(hotkey);
        hotkeys.forEach(function (h) {
            _this._registeredHotkeys.delete(h);
            if (pausing) {
                _this._pausedHotkeys.add(h);
            }
            _this._mousetrapInstance.unbind(h.combo, h.specificEvent);
        });
    };
    /**
     * Returns all hotkeys matching the passed combo(s).
     * @param {?=} combo combo to match against
     * @return {?} all matched hotkeys
     */
    NgxHotkeysService.prototype.get = /**
     * Returns all hotkeys matching the passed combo(s).
     * @param {?=} combo combo to match against
     * @return {?} all matched hotkeys
     */
    function (combo) {
        return this.hotkeys.filter(function (h) { return h.combo === combo; });
    };
    /**
     * Stops listening for the specified hotkeys.
     * @param {?=} hotkey hotkey filter
     * @return {?}
     */
    NgxHotkeysService.prototype.pause = /**
     * Stops listening for the specified hotkeys.
     * @param {?=} hotkey hotkey filter
     * @return {?}
     */
    function (hotkey) {
        if (!hotkey) {
            return this.pause(this.hotkeys);
        }
        var /** @type {?} */ hotkeys = [].concat(hotkey);
        this.unregister(hotkeys, true);
    };
    /**
     * Resumes listening for the specified hotkeys.
     * @param {?=} hotkey hotkey filter
     * @return {?}
     */
    NgxHotkeysService.prototype.unpause = /**
     * Resumes listening for the specified hotkeys.
     * @param {?=} hotkey hotkey filter
     * @return {?}
     */
    function (hotkey) {
        if (!hotkey) {
            return this.unpause(this.hotkeys);
        }
        var /** @type {?} */ hotkeys = [].concat(hotkey);
        this.register(hotkeys, true);
    };
    /**
     * Resets all hotkeys.
     * @return {?}
     */
    NgxHotkeysService.prototype.reset = /**
     * Resets all hotkeys.
     * @return {?}
     */
    function () {
        this._mousetrapInstance.reset();
        this._registeredHotkeys.clear();
        this._pausedHotkeys.clear();
    };
    /**
     * @return {?}
     */
    NgxHotkeysService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.reset();
    };
    /**
     * @param {?} hotkey
     * @return {?}
     */
    NgxHotkeysService.prototype.bindToMoustrap = /**
     * @param {?} hotkey
     * @return {?}
     */
    function (hotkey) {
        var _this = this;
        this._mousetrapInstance.bind(hotkey.combo, function (event, combo) {
            var /** @type {?} */ shouldExecute = true;
            // if the callback is executed directly `hotkey.get('w').callback()`
            // there will be no event, so just execute the callback.
            if (event) {
                var /** @type {?} */ target = /** @type {?} */ ((event.target || event.srcElement)); // srcElement is IE only
                var /** @type {?} */ nodeName = target.nodeName.toUpperCase();
                // check if the input has a mousetrap class, and skip checking preventIn if so
                if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {
                    shouldExecute = true;
                }
                else if (_this._preventIn.indexOf(nodeName) > -1 && hotkey.allowIn.map(function (allow) { return allow.toUpperCase(); }).indexOf(nodeName) === -1) {
                    // don't execute callback if the event was fired from inside an element listed in preventIn but not in allowIn
                    shouldExecute = false;
                }
            }
            if (shouldExecute) {
                return hotkey.handler.apply(_this, [event, combo]);
            }
        }, hotkey.specificEvent);
    };
    NgxHotkeysService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxHotkeysService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [HotkeyOptions,] },] },
    ]; };
    return NgxHotkeysService;
}());
export { NgxHotkeysService };
function NgxHotkeysService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxHotkeysService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxHotkeysService.ctorParameters;
    /** @type {?} */
    NgxHotkeysService.prototype._serviceOptions;
    /** @type {?} */
    NgxHotkeysService.prototype._registeredHotkeys;
    /** @type {?} */
    NgxHotkeysService.prototype._pausedHotkeys;
    /** @type {?} */
    NgxHotkeysService.prototype._mousetrapInstance;
    /** @type {?} */
    NgxHotkeysService.prototype._cheatSheetToggled;
    /** @type {?} */
    NgxHotkeysService.prototype._preventIn;
    /** @type {?} */
    NgxHotkeysService.prototype._options;
}

//# sourceMappingURL=data:application/json;base64,