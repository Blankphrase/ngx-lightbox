{"version":3,"file":"balticcode-ngx-hotkeys.js.map","sources":["ng://@balticcode/ngx-hotkeys/lib/token.ts","ng://@balticcode/ngx-hotkeys/lib/ngx-hotkeys.service.ts","ng://@balticcode/ngx-hotkeys/lib/ngx-hotkeys.directive.ts","ng://@balticcode/ngx-hotkeys/lib/ngx-cheatsheet/ngx-cheatsheet.component.ts","ng://@balticcode/ngx-hotkeys/lib/ngx-hotkeys.module.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\nimport {IHotkeyOptions} from './interfaces';\r\n\r\nexport const HotkeyOptions = new InjectionToken<IHotkeyOptions>('HotkeyOptions');\r\n","import {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport 'mousetrap';\n\nimport {IHotkey, IHotkeyOptions} from './interfaces';\nimport {HotkeyOptions} from './token';\nimport {share} from 'rxjs/internal/operators';\n\nconst _defaultOptions: IHotkeyOptions = {\n  disableCheatSheet: false,\n  cheatSheetTitle: 'Keyboard Shortcuts:',\n  cheatSheetHotkey: '?',\n  cheatSheetHotkeyDescription: 'Show / hide this help menu',\n  cheatSheetCloseEsc: false,\n  cheatSheetCloseEscDescription: 'Hide this help menu'\n};\n\n@Injectable()\nexport class NgxHotkeysService implements OnDestroy {\n\n  private _serviceOptions: IHotkeyOptions;\n  private _registeredHotkeys: Set<IHotkey> = new Set();\n  private _pausedHotkeys: Set<IHotkey> = new Set();\n  private _mousetrapInstance: MousetrapInstance;\n  private _cheatSheetToggled: Subject<any> = new Subject();\n  private _preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];\n\n  constructor(@Inject(HotkeyOptions) private _options: IHotkeyOptions) {\n    this._serviceOptions = Object.assign(_defaultOptions, this._options);\n    Mousetrap.prototype.stopCallback = (event: KeyboardEvent, element: HTMLElement, combo: string, callback: Function) => {\n      // if the element has the class \"mousetrap\" then no need to stop\n      if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n        return false;\n      }\n      return (element.contentEditable && element.contentEditable === 'true');\n    };\n    this._mousetrapInstance = new (<any>Mousetrap)();\n    if (!this._serviceOptions.disableCheatSheet) {\n      this.register({\n        combo: this._serviceOptions.cheatSheetHotkey,\n        handler: function (event: KeyboardEvent) {\n          this._cheatSheetToggled.next();\n        }.bind(this),\n        description: this._serviceOptions.cheatSheetHotkeyDescription\n      });\n    }\n\n    if (this._serviceOptions.cheatSheetCloseEsc) {\n      this.register({\n        combo: 'esc',\n        handler: function (event: KeyboardEvent) {\n          this._cheatSheetToggled.next(false);\n        }.bind(this),\n        allowIn: ['HOTKEYS-CHEATSHEET'],\n        description: this._serviceOptions.cheatSheetCloseEscDescription\n      });\n    }\n  }\n\n  /**\n   * Returns the registered hotkeys as array.\n   * @returns all registered hotkeys\n   */\n  public get hotkeys(): IHotkey[] {\n    return Array.from(this._registeredHotkeys);\n  }\n\n  /**\n   * Returns an Observable stream indicating the cheatsheets visibility was toggled.\n   * @returns stream indicating the cheatsheets visibility was toggled\n   */\n  public get cheatSheetToggled(): Observable<boolean> {\n    return this._cheatSheetToggled.asObservable().pipe(\n      share()\n    );\n  }\n\n  public get options(): IHotkeyOptions {\n    return this._serviceOptions;\n  }\n\n  /**\n   * Registers a new hotkey/new hotkeys with it's/their handler(s).\n   * @param hotkey hotkeys to listen for\n   * @param unpausing flag indicating if the hotkeys should be unpaused\n   */\n  public register(hotkey: IHotkey | IHotkey[], unpausing = false): void {\n    let hotkeys: IHotkey[] = [].concat(hotkey);\n    if (unpausing) {\n      hotkeys = Array.from(this._pausedHotkeys);\n    }\n    hotkeys.forEach(h => {\n      if (unpausing) {\n        this._pausedHotkeys.delete(h);\n      }\n      this._registeredHotkeys.add(h);\n      this.bindToMoustrap(h);\n    });\n  }\n\n  /**\n   * Removes a/the registered hotkey(s).\n   * @param hotkey hotkey filter\n   * @param pausing flag indicating if the hotkeys should be paused\n   */\n  public unregister(hotkey: IHotkey | IHotkey[], pausing = false): void {\n    const hotkeys: IHotkey[] = [].concat(hotkey);\n\n    hotkeys.forEach(h => {\n      this._registeredHotkeys.delete(h);\n      if (pausing) {\n        this._pausedHotkeys.add(h);\n      }\n      this._mousetrapInstance.unbind(h.combo, h.specificEvent);\n    });\n  }\n\n  /**\n   * Returns all hotkeys matching the passed combo(s).\n   * @param combo combo to match against\n   * @returns all matched hotkeys\n   */\n  public get(combo?: string | string[]): IHotkey[] {\n    return this.hotkeys.filter(h => h.combo === combo);\n  }\n\n  /**\n   * Stops listening for the specified hotkeys.\n   * @param hotkey hotkey filter\n   */\n  public pause(hotkey?: IHotkey | IHotkey[]): void {\n    if (!hotkey) {\n      return this.pause(this.hotkeys);\n    }\n    const hotkeys: IHotkey[] = [].concat(hotkey);\n    this.unregister(hotkeys, true);\n  }\n\n  /**\n   * Resumes listening for the specified hotkeys.\n   * @param hotkey hotkey filter\n   */\n  public unpause(hotkey?: IHotkey | IHotkey[]): void {\n    if (!hotkey) {\n      return this.unpause(this.hotkeys);\n    }\n    const hotkeys: IHotkey[] = [].concat(hotkey);\n    this.register(hotkeys, true);\n  }\n\n  /**\n   * Resets all hotkeys.\n   */\n  public reset(): void {\n    this._mousetrapInstance.reset();\n    this._registeredHotkeys.clear();\n    this._pausedHotkeys.clear();\n  }\n\n  public ngOnDestroy(): void {\n    this.reset();\n  }\n\n  private bindToMoustrap(hotkey: IHotkey): void {\n\n    this._mousetrapInstance.bind(hotkey.combo,\n      (event: KeyboardEvent, combo: string) => {\n        let shouldExecute = true;\n\n        // if the callback is executed directly `hotkey.get('w').callback()`\n        // there will be no event, so just execute the callback.\n        if (event) {\n          const target: HTMLElement = <HTMLElement>(event.target || event.srcElement); // srcElement is IE only\n          const nodeName: string = target.nodeName.toUpperCase();\n\n          // check if the input has a mousetrap class, and skip checking preventIn if so\n          if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {\n            shouldExecute = true;\n          } else if (this._preventIn.indexOf(nodeName) > -1 && hotkey.allowIn.map(allow => allow.toUpperCase()).indexOf(nodeName) === -1) {\n            // don't execute callback if the event was fired from inside an element listed in preventIn but not in allowIn\n            shouldExecute = false;\n          }\n        }\n\n        if (shouldExecute) {\n          return hotkey.handler.apply(this, [event, combo]);\n        }\n      },\n      hotkey.specificEvent);\n  }\n}\n","import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\r\n\r\nimport 'mousetrap';\r\n\r\nimport {HotKeyMap, IHotkey} from './interfaces';\r\nimport {NgxHotkeysService} from './ngx-hotkeys.service';\r\n\r\n@Directive({\r\n  selector: '[ngxHotkeys]',\r\n  providers: [NgxHotkeysService]\r\n})\r\nexport class NgxHotkeysDirective implements OnInit, OnDestroy {\r\n\r\n  @Input()\r\n  hotkeys: HotKeyMap[];\r\n\r\n  private _mousetrapInstance: MousetrapInstance;\r\n  private _hotkeysList: IHotkey[] = [];\r\n  private _oldHotkeys: IHotkey[] = [];\r\n\r\n  constructor(private _hotkeysService: NgxHotkeysService, private _elementRef: ElementRef) {\r\n    this._mousetrapInstance = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)\r\n  }\r\n\r\n  ngOnInit() {\r\n    for (const hotkey of this.hotkeys) {\r\n      const combo = Object.keys(hotkey)[0];\r\n      const hotkeyObj: IHotkey = {\r\n        combo: combo,\r\n        handler: hotkey[combo]\r\n      };\r\n      const filtered: IHotkey[] = this._hotkeysService.get(combo);\r\n      const oldHotkey: IHotkey = !!filtered && !!filtered.length ? filtered[0] : null;\r\n      if (oldHotkey !== null) { // We let the user overwrite callbacks temporarily if you specify it in HTML\r\n        this._oldHotkeys.push(oldHotkey);\r\n        this._hotkeysService.unregister(oldHotkey);\r\n      }\r\n      this._hotkeysList.push(hotkeyObj);\r\n      this._mousetrapInstance.bind(hotkeyObj.combo, hotkeyObj.handler);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    for (const hotkey of this._hotkeysList) {\r\n      this._mousetrapInstance.unbind(hotkey.combo);\r\n    }\r\n    this._hotkeysService.register(this._oldHotkeys);\r\n  }\r\n}\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {NgxHotkeysService} from '../ngx-hotkeys.service';\nimport {IHotkey} from '../interfaces';\n\n@Component({\n  selector: 'ngx-cheatsheet',\n  template: `<div class=\"ngx-cheatsheet fade\" [ngClass]=\"{'in': helpVisible}\" style=\"display:none\">\n  <div class=\"ngx-cheatsheet__hotkeys\">\n    <h4 class=\"ngx-cheatsheet__hotkeys__title\">{{ title }}</h4>\n    <table>\n      <tbody>\n      <tr *ngFor=\"let hotkey of hotkeys\">\n        <td class=\"ngx-cheatsheet__hotkeys__keys\">\n          <span class=\"ngx-cheatsheet__hotkeys__keys__key\">{{ formatHotkey(hotkey) }}</span>\n        </td>\n        <td class=\"ngx-cheatsheet__hotkeys__keys__text\">{{ hotkey.description }}</td>\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"ngx-cheatsheet__hotkeys__close\" (click)=\"toggleCheatSheet()\">&#215;</div>\n  </div>\n</div>\n`,\n  styles: [`.ngx-cheatsheet{display:table!important;position:fixed;width:100%;height:100%;top:0;left:0;color:#333;font-size:1em;background-color:rgba(255,255,255,.9)}.ngx-cheatsheet.fade{z-index:-1024;visibility:hidden;opacity:0;transition:opacity .15s linear}.ngx-cheatsheet.fade.in{z-index:10002;visibility:visible;opacity:1}.ngx-cheatsheet__hotkeys{width:100%;height:100%;display:table-cell;vertical-align:middle}.ngx-cheatsheet__hotkeys__title{font-weight:700;text-align:center;font-size:1.2em}.ngx-cheatsheet__hotkeys table{margin:auto;color:#333}.ngx-cheatsheet__hotkeys__keys{padding:5px;text-align:right}.ngx-cheatsheet__hotkeys__keys__key{display:inline-block;color:#fff;background-color:#333;border:1px solid #333;border-radius:5px;text-align:center;margin-right:5px;box-shadow:inset 0 1px 0 #666,0 1px 0 #bbb;padding:5px 9px;font-size:1em}.ngx-cheatsheet__hotkeys__keys__text{padding-left:10px;font-size:1em}.ngx-cheatsheet__hotkeys__close{position:fixed;top:20px;right:20px;font-size:2em;font-weight:700;padding:5px 10px;border:1px solid #ddd;border-radius:5px;min-height:45px;min-width:45px;text-align:center}@media all and (max-width:500px){.ngx-cheatsheet__hotkeys{font-size:.8em}}@media all and (min-width:750px){.ngx-cheatsheet__hotkeys{font-size:1.2em}}`]\n})\nexport class NgxCheatsheetComponent implements OnInit, OnDestroy {\n\n  @Input()\n  title: string;\n\n  helpVisible = false;\n  hotkeys: IHotkey[];\n\n  private _subscription: Subscription;\n\n  private _map: any = {\n    command: '\\u2318',       // â\n    shift: '\\u21E7',         // â§\n    left: '\\u2190',          // â\n    right: '\\u2192',         // â\n    up: '\\u2191',            // â\n    down: '\\u2193',          // â\n    'return': '\\u23CE',      // â\n    backspace: '\\u232B'      // â«\n  };\n\n  constructor(private hotkeysService: NgxHotkeysService) {\n    this.title = this.hotkeysService.options.cheatSheetTitle;\n  }\n\n  ngOnInit(): void {\n    this._subscription = this.hotkeysService.cheatSheetToggled\n      .subscribe((isOpen) => {\n        if (isOpen !== false) {\n          this.hotkeys = this.hotkeysService.hotkeys\n            .filter(hotkey => hotkey.description);\n        }\n\n        if (isOpen === false) {\n          this.helpVisible = false;\n        } else {\n          this.toggleCheatSheet();\n        }\n      });\n  }\n\n  formatHotkey(hotkey: IHotkey): string[] {\n    if (!hotkey.format) {\n      const combo: string = Array.isArray(hotkey.combo) ? hotkey.combo[0] : hotkey.combo;\n      const sequence: string[] = combo.split(/[\\s]/);\n      for (let i = 0; i < sequence.length; i++) {\n        sequence[i] = this.symbolize(sequence[i]);\n      }\n      hotkey.format = sequence;\n    }\n    return hotkey.format;\n  }\n\n  private symbolize(combo: string): string {\n    const comboSplit: string[] = combo.split('+');\n    for (let i = 0; i < comboSplit.length; i++) {\n      // try to resolve command / ctrl based on OS:\n      if (comboSplit[i] === 'mod') {\n        if (window.navigator && window.navigator.platform.indexOf('Mac') >= 0) {\n          comboSplit[i] = 'command';\n        } else {\n          comboSplit[i] = 'ctrl';\n        }\n      }\n      comboSplit[i] = this._map[comboSplit[i]] || comboSplit[i];\n    }\n    return comboSplit.join(' + ');\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  public toggleCheatSheet(): void {\n    this.helpVisible = !this.helpVisible;\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {NgxCheatsheetComponent} from './ngx-cheatsheet/ngx-cheatsheet.component';\nimport {NgxHotkeysDirective} from './ngx-hotkeys.directive';\nimport {NgxHotkeysService} from './ngx-hotkeys.service';\nimport {HotkeyOptions} from './token';\nimport {IHotkeyOptions} from './interfaces';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxCheatsheetComponent, NgxHotkeysDirective],\n  exports: [NgxHotkeysDirective, NgxCheatsheetComponent],\n  providers: [NgxHotkeysService]\n})\nexport class NgxHotkeysModule {\n  static forRoot(options?: IHotkeyOptions): ModuleWithProviders {\n    return {\n      ngModule: NgxHotkeysModule,\n      providers: [\n        NgxHotkeysService,\n        {provide: HotkeyOptions, useValue: options}\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
