/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import 'mousetrap';
import { NgxHotkeysService } from './ngx-hotkeys.service';
export class NgxHotkeysDirective {
    /**
     * @param {?} _hotkeysService
     * @param {?} _elementRef
     */
    constructor(_hotkeysService, _elementRef) {
        this._hotkeysService = _hotkeysService;
        this._elementRef = _elementRef;
        this._hotkeysList = [];
        this._oldHotkeys = [];
        this._mousetrapInstance = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        for (const /** @type {?} */ hotkey of this.hotkeys) {
            const /** @type {?} */ combo = Object.keys(hotkey)[0];
            const /** @type {?} */ hotkeyObj = {
                combo: combo,
                handler: hotkey[combo]
            };
            const /** @type {?} */ filtered = this._hotkeysService.get(combo);
            const /** @type {?} */ oldHotkey = !!filtered && !!filtered.length ? filtered[0] : null;
            if (oldHotkey !== null) {
                // We let the user overwrite callbacks temporarily if you specify it in HTML
                this._oldHotkeys.push(oldHotkey);
                this._hotkeysService.unregister(oldHotkey);
            }
            this._hotkeysList.push(hotkeyObj);
            this._mousetrapInstance.bind(hotkeyObj.combo, hotkeyObj.handler);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        for (const /** @type {?} */ hotkey of this._hotkeysList) {
            this._mousetrapInstance.unbind(hotkey.combo);
        }
        this._hotkeysService.register(this._oldHotkeys);
    }
}
NgxHotkeysDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxHotkeys]',
                providers: [NgxHotkeysService]
            },] },
];
/** @nocollapse */
NgxHotkeysDirective.ctorParameters = () => [
    { type: NgxHotkeysService, },
    { type: ElementRef, },
];
NgxHotkeysDirective.propDecorators = {
    "hotkeys": [{ type: Input },],
};
function NgxHotkeysDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxHotkeysDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxHotkeysDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxHotkeysDirective.propDecorators;
    /** @type {?} */
    NgxHotkeysDirective.prototype.hotkeys;
    /** @type {?} */
    NgxHotkeysDirective.prototype._mousetrapInstance;
    /** @type {?} */
    NgxHotkeysDirective.prototype._hotkeysList;
    /** @type {?} */
    NgxHotkeysDirective.prototype._oldHotkeys;
    /** @type {?} */
    NgxHotkeysDirective.prototype._hotkeysService;
    /** @type {?} */
    NgxHotkeysDirective.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhvdGtleXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJhbHRpY2NvZGUvbmd4LWhvdGtleXMvIiwic291cmNlcyI6WyJsaWIvbmd4LWhvdGtleXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBRTlFLE9BQU8sV0FBVyxDQUFDO0FBR25CLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBTXhELE1BQU07Ozs7O0lBU0osWUFBb0IsZUFBa0MsRUFBVSxXQUF1QjtRQUFuRSxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTs0QkFIckQsRUFBRTsyQkFDSCxFQUFFO1FBR2pDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3pFOzs7O0lBRUQsUUFBUTtRQUNOLEdBQUcsQ0FBQyxDQUFDLHVCQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNsQyx1QkFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyx1QkFBTSxTQUFTLEdBQVk7Z0JBQ3pCLEtBQUssRUFBRSxLQUFLO2dCQUNaLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ3ZCLENBQUM7WUFDRix1QkFBTSxRQUFRLEdBQWMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUQsdUJBQU0sU0FBUyxHQUFZLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2hGLEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDOztnQkFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzVDO1lBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNsRTtLQUNGOzs7O0lBRUQsV0FBVztRQUNULEdBQUcsQ0FBQyxDQUFDLHVCQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QztRQUNELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNqRDs7O1lBeENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7YUFDL0I7Ozs7WUFMTyxpQkFBaUI7WUFMTixVQUFVOzs7d0JBYTFCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCAnbW91c2V0cmFwJztcclxuXHJcbmltcG9ydCB7SG90S2V5TWFwLCBJSG90a2V5fSBmcm9tICcuL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQge05neEhvdGtleXNTZXJ2aWNlfSBmcm9tICcuL25neC1ob3RrZXlzLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbmd4SG90a2V5c10nLFxyXG4gIHByb3ZpZGVyczogW05neEhvdGtleXNTZXJ2aWNlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4SG90a2V5c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgQElucHV0KClcclxuICBob3RrZXlzOiBIb3RLZXlNYXBbXTtcclxuXHJcbiAgcHJpdmF0ZSBfbW91c2V0cmFwSW5zdGFuY2U6IE1vdXNldHJhcEluc3RhbmNlO1xyXG4gIHByaXZhdGUgX2hvdGtleXNMaXN0OiBJSG90a2V5W10gPSBbXTtcclxuICBwcml2YXRlIF9vbGRIb3RrZXlzOiBJSG90a2V5W10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaG90a2V5c1NlcnZpY2U6IE5neEhvdGtleXNTZXJ2aWNlLCBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLl9tb3VzZXRyYXBJbnN0YW5jZSA9IG5ldyBNb3VzZXRyYXAodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTsgLy8gQmluZCBob3RrZXlzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgKGFuZCBhbnkgY2hpbGRyZW4pXHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGZvciAoY29uc3QgaG90a2V5IG9mIHRoaXMuaG90a2V5cykge1xyXG4gICAgICBjb25zdCBjb21ibyA9IE9iamVjdC5rZXlzKGhvdGtleSlbMF07XHJcbiAgICAgIGNvbnN0IGhvdGtleU9iajogSUhvdGtleSA9IHtcclxuICAgICAgICBjb21ibzogY29tYm8sXHJcbiAgICAgICAgaGFuZGxlcjogaG90a2V5W2NvbWJvXVxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBmaWx0ZXJlZDogSUhvdGtleVtdID0gdGhpcy5faG90a2V5c1NlcnZpY2UuZ2V0KGNvbWJvKTtcclxuICAgICAgY29uc3Qgb2xkSG90a2V5OiBJSG90a2V5ID0gISFmaWx0ZXJlZCAmJiAhIWZpbHRlcmVkLmxlbmd0aCA/IGZpbHRlcmVkWzBdIDogbnVsbDtcclxuICAgICAgaWYgKG9sZEhvdGtleSAhPT0gbnVsbCkgeyAvLyBXZSBsZXQgdGhlIHVzZXIgb3ZlcndyaXRlIGNhbGxiYWNrcyB0ZW1wb3JhcmlseSBpZiB5b3Ugc3BlY2lmeSBpdCBpbiBIVE1MXHJcbiAgICAgICAgdGhpcy5fb2xkSG90a2V5cy5wdXNoKG9sZEhvdGtleSk7XHJcbiAgICAgICAgdGhpcy5faG90a2V5c1NlcnZpY2UudW5yZWdpc3RlcihvbGRIb3RrZXkpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2hvdGtleXNMaXN0LnB1c2goaG90a2V5T2JqKTtcclxuICAgICAgdGhpcy5fbW91c2V0cmFwSW5zdGFuY2UuYmluZChob3RrZXlPYmouY29tYm8sIGhvdGtleU9iai5oYW5kbGVyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgZm9yIChjb25zdCBob3RrZXkgb2YgdGhpcy5faG90a2V5c0xpc3QpIHtcclxuICAgICAgdGhpcy5fbW91c2V0cmFwSW5zdGFuY2UudW5iaW5kKGhvdGtleS5jb21ibyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9ob3RrZXlzU2VydmljZS5yZWdpc3Rlcih0aGlzLl9vbGRIb3RrZXlzKTtcclxuICB9XHJcbn1cclxuIl19