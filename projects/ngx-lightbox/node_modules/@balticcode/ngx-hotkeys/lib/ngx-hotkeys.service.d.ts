import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import 'mousetrap';
import { IHotkey, IHotkeyOptions } from './interfaces';
export declare class NgxHotkeysService implements OnDestroy {
    private _options;
    private _serviceOptions;
    private _registeredHotkeys;
    private _pausedHotkeys;
    private _mousetrapInstance;
    private _cheatSheetToggled;
    private _preventIn;
    constructor(_options: IHotkeyOptions);
    /**
     * Returns the registered hotkeys as array.
     * @returns all registered hotkeys
     */
    readonly hotkeys: IHotkey[];
    /**
     * Returns an Observable stream indicating the cheatsheets visibility was toggled.
     * @returns stream indicating the cheatsheets visibility was toggled
     */
    readonly cheatSheetToggled: Observable<boolean>;
    readonly options: IHotkeyOptions;
    /**
     * Registers a new hotkey/new hotkeys with it's/their handler(s).
     * @param hotkey hotkeys to listen for
     * @param unpausing flag indicating if the hotkeys should be unpaused
     */
    register(hotkey: IHotkey | IHotkey[], unpausing?: boolean): void;
    /**
     * Removes a/the registered hotkey(s).
     * @param hotkey hotkey filter
     * @param pausing flag indicating if the hotkeys should be paused
     */
    unregister(hotkey: IHotkey | IHotkey[], pausing?: boolean): void;
    /**
     * Returns all hotkeys matching the passed combo(s).
     * @param combo combo to match against
     * @returns all matched hotkeys
     */
    get(combo?: string | string[]): IHotkey[];
    /**
     * Stops listening for the specified hotkeys.
     * @param hotkey hotkey filter
     */
    pause(hotkey?: IHotkey | IHotkey[]): void;
    /**
     * Resumes listening for the specified hotkeys.
     * @param hotkey hotkey filter
     */
    unpause(hotkey?: IHotkey | IHotkey[]): void;
    /**
     * Resets all hotkeys.
     */
    reset(): void;
    ngOnDestroy(): void;
    private bindToMoustrap(hotkey);
}
